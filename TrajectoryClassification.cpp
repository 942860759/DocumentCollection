//
//  main.cpp
//  TrajectoryClassification
//
//  Created by 唐伟 on 2017/10/10.
//  Copyright © 2017年 唐伟. All rights reserved.
//

#include <iostream>
#include <vector>
#include <math.h>
#include <cmath>
using namespace std;

#define MAX 100
#define pi 3.1415926
const int M = 9;// 全部M个人轨迹
const double w0 = pi / 8;//转角阈值(第一个为pi/7,第二个为pi/6,第三个为pi/8.这个参数影响很大）
const double e0 = 0.90;//近邻阈值
const double WD = 0.25, WA = 0.25, WL = 0.5;//方向、速度WS=0、转角、位置的权重
const int MinLns = 2;//近邻数量阈值
double maxSDIDT;//全局变量
const int  KNN = 4;//KNN分类数目
double DirTool[M][M] = { 0 };//距离矩阵
int class_group[KNN][M] = { 0 };//分类数组
const int MaxLength = 80;//最多轨迹分段数

struct Point {
	int x;
	int y;
};
struct Trajectory {
	int n;// 走了n步
	Point point[MAX];
}trajectory[M] = {

	/*{ 32,{ { 3,125 },{ 5,123 },{ 22,117 },{ 33,112 },{ 49,104 },{ 66,98 },{ 74,95 },{ 77,95 },{ 89,92 },{ 100,90 },{ 111,86 },{ 121,82 },{ 135,75 },{ 150,69 },{ 165,57 },{ 176,48 },{ 183,42 },{ 192,36 },{ 198,32 },{ 204,29 },{ 218,22 },{ 227,18 },{ 236,18 },{ 244,18 },{ 256,18 },{ 265,18 },{ 283,14 },{ 288,13 },{ 292,12 },{ 301,7 },{ 308,2 },{ 316,-4 } } },
	{ 42,{ { 1,98 },{ 4,98 },{ 20,98 },{ 37,98 },{ 48,97 },{ 55,96 },{ 59,98 },{ 63,99 },{ 73,99 },{ 86,100 },{ 103,100 },{ 107,98 },{ 116,94 },{ 126,89 },{ 139,86 },{ 149,82 },{ 155,82 },{ 159,80 },{ 166,76 },{ 173,71 },{ 177,69 },{ 189,64 },{ 193,61 },{ 206,58 },{ 225,54 },{ 230,53 },{ 238,50 },{ 243,49 },{ 257,46 },{ 264,46 },{ 270,46 },{ 284,43 },{ 306,37 },{ 318,35 },{ 322,34 },{ 335,29 },{ 349,22 },{ 356,19 },{ 362,15 },{ 373,6 },{ 382,2 },{ 385,0 } } },
	{ 44,
	{ { 6,171 },{ 20,171 },{ 29,171 },{ 41,168 },{ 62,161 },{ 69,159 },{ 84,152 },{ 96,143 },{ 107,136 },{ 122,127 },{ 130,122 },{ 146,111 },{ 156,104 },{ 167,94 },{ 178,85 },{ 184,81 },{ 188,78 },{ 194,74 },{ 202,70 },{ 206,68 },{ 213,64 },{ 220,61 },{ 224,61 },{ 236,58 },{ 241,56 },{ 254,53 },{ 265,49 },{ 276,42 },{ 281,39 },{ 294,35 },{ 300,33 },{ 307,32 },{ 319,31 },{ 333,31 },{ 357,30 },{ 377,30 },{ 389,28 },{ 392,26 },{ 398,23 },{ 404,20 },{ 410,16 },{ 414,11 },{ 424,3 },{ 429,0 } } },
	{ 57,
	{ { 529,1 },{ 532,15 },{ 532,19 },{ 523,30 },{ 518,35 },{ 510,49 },{ 508,55 },{ 504,66 },{ 499,77 },{ 490,92 },{ 469,112 },{ 464,116 },{ 453,124 },{ 440,134 },{ 431,138 },{ 423,143 },{ 412,147 },{ 399,154 },{ 383,160 },{ 374,164 },{ 365,167 },{ 342,171 },{ 325,178 },{ 305,186 },{ 299,190 },{ 281,203 },{ 275,208 },{ 270,213 },{ 259,228 },{ 253,241 },{ 245,259 },{ 243,275 },{ 243,286 },{ 243,300 },{ 244,309 },{ 249,318 },{ 253,334 },{ 253,345 },{ 253,358 },{ 246,371 },{ 235,384 },{ 228,394 },{ 225,397 },{ 219,403 },{ 206,411 },{ 197,415 },{ 190,417 },{ 182,419 },{ 168,423 },{ 159,425 },{ 147,429 },{ 131,434 },{ 115,440 },{ 103,447 },{ 93,452 },{ 73,464 },{ 57,477 } } },
	{ 59,
	{ { 157,455 },{ 157,453 },{ 158,443 },{ 158,436 },{ 158,433 },{ 158,427 },{ 160,419 },{ 160,415 },{ 163,410 },{ 167,403 },{ 174,392 },{ 179,383 },{ 181,380 },{ 187,375 },{ 197,362 },{ 209,353 },{ 221,341 },{ 228,335 },{ 236,329 },{ 252,320 },{ 263,313 },{ 266,311 },{ 273,306 },{ 282,300 },{ 285,296 },{ 290,288 },{ 295,280 },{ 302,271 },{ 313,255 },{ 322,239 },{ 333,222 },{ 340,214 },{ 344,210 },{ 347,207 },{ 353,197 },{ 358,189 },{ 362,184 },{ 368,177 },{ 378,163 },{ 386,153 },{ 397,144 },{ 401,141 },{ 407,133 },{ 411,130 },{ 418,122 },{ 424,116 },{ 434,100 },{ 443,88 },{ 446,80 },{ 455,69 },{ 463,55 },{ 470,45 },{ 484,29 },{ 487,26 },{ 491,20 },{ 494,17 },{ 505,5 },{ 511,0 },{ 514,-4 } } },
	{ 41,
	{ { 16,281 },{ 31,276 },{ 36,276 },{ 46,274 },{ 58,271 },{ 74,269 },{ 83,268 },{ 117,262 },{ 151,260 },{ 192,260 },{ 222,260 },{ 234,261 },{ 241,263 },{ 251,269 },{ 266,283 },{ 273,288 },{ 284,296 },{ 294,305 },{ 301,309 },{ 310,316 },{ 325,324 },{ 336,332 },{ 349,340 },{ 368,345 },{ 376,345 },{ 386,346 },{ 410,349 },{ 450,353 },{ 493,358 },{ 515,360 },{ 557,361 },{ 570,361 },{ 584,360 },{ 593,357 },{ 605,355 },{ 628,348 },{ 636,346 },{ 653,343 },{ 659,341 },{ 664,341 },{ 671,338 } } },
	{ 63,
	{ { 2,333 },{ 7,332 },{ 14,331 },{ 29,329 },{ 36,327 },{ 44,325 },{ 61,320 },{ 83,318 },{ 91,318 },{ 114,314 },{ 131,311 },{ 150,308 },{ 168,307 },{ 181,306 },{ 191,302 },{ 212,297 },{ 221,295 },{ 230,294 },{ 239,292 },{ 244,291 },{ 251,288 },{ 259,286 },{ 274,285 },{ 277,284 },{ 290,283 },{ 305,283 },{ 313,283 },{ 322,283 },{ 326,283 },{ 337,287 },{ 349,291 },{ 354,293 },{ 365,294 },{ 374,295 },{ 381,295 },{ 389,297 },{ 400,300 },{ 450,307 },{ 467,308 },{ 480,308 },{ 503,308 },{ 525,307 },{ 531,307 },{ 538,305 },{ 559,304 },{ 564,304 },{ 568,304 },{ 574,304 },{ 584,304 },{ 594,304 },{ 599,304 },{ 608,306 },{ 612,308 },{ 619,311 },{ 623,312 },{ 627,312 },{ 636,312 },{ 645,315 },{ 650,315 },{ 655,315 },{ 664,317 },{ 667,318 },{ 674,323 } } },
	{ 78,
	{ { 2,249 },{ 16,249 },{ 25,249 },{ 34,249 },{ 38,250 },{ 59,251 },{ 63,251 },{ 75,253 },{ 82,254 },{ 91,256 },{ 109,260 },{ 117,261 },{ 125,262 },{ 141,266 },{ 150,269 },{ 155,269 },{ 164,272 },{ 174,275 },{ 188,282 },{ 201,285 },{ 209,286 },{ 217,288 },{ 224,290 },{ 228,291 },{ 242,292 },{ 252,292 },{ 261,293 },{ 268,295 },{ 276,295 },{ 293,295 },{ 303,295 },{ 309,295 },{ 316,295 },{ 321,295 },{ 342,291 },{ 349,291 },{ 356,290 },{ 365,288 },{ 368,288 },{ 375,288 },{ 383,288 },{ 388,288 },{ 416,291 },{ 422,294 },{ 426,297 },{ 433,301 },{ 446,308 },{ 450,311 },{ 460,318 },{ 463,319 },{ 471,323 },{ 482,325 },{ 487,327 },{ 493,328 },{ 503,331 },{ 517,333 },{ 532,336 },{ 542,339 },{ 566,347 },{ 581,351 },{ 587,354 },{ 600,358 },{ 606,360 },{ 611,363 },{ 620,368 },{ 626,374 },{ 632,384 },{ 633,388 },{ 634,390 },{ 637,394 },{ 641,401 },{ 643,405 },{ 649,411 },{ 653,414 },{ 656,419 },{ 665,429 },{ 671,433 },{ 681,442 } } },
*/

	    /*{47,{{255,8},{242,9},{234,18},{231,27},{228,32},{226,36},{220,48},{212,61},{211,69},{211,77},{211,93},{213,98},{218,112},{221,118},{228,131},{234,144},{242,157},{251,166},{258,178},{258,191},{258,202},{254,215},{251,221},{245,232},{243,237},{234,251},{227,260},{221,265},{207,272},{188,284},{184,287},{177,294},{171,304},{167,320},{165,334},{165,341},{164,351},{164,366},{164,382},{166,393},{170,413},{173,429},{173,436},{168,442},{163,446},{155,453},{146,462}}},
	    {74,{{189,2},{188,9},{184,13},{179,21},{174,27},{173,30},{173,43},{174,60},{177,67},{178,72},{180,77},{183,86},{187,90},{194,101},{201,112},{208,121},{212,128},{215,133},{218,138},{224,147},{235,156},{241,160},{248,166},{256,173},{259,177},{261,186},{261,194},{261,202},{261,207},{261,212},{261,226},{261,231},{261,234},{261,239},{261,248},{254,256},{249,263},{249,269},{248,275},{248,281},{248,292},{248,300},{248,306},{248,311},{253,320},{253,326},{250,333},{240,339},{231,342},{228,343},{225,346},{220,349},{217,352},{211,355},{199,355},{199,358},{195,361},{188,365},{183,369},{172,377},{166,384},{165,388},{160,393},{157,395},{153,399},{148,405},{146,410},{139,427},{132,444},{129,446},{123,447},{113,451},{106,456},{98,461}}},
	    {55,{{8,116},{22,109},{36,104},{41,102},{46,100},{63,94},{70,93},{93,91},{105,91},{121,91},{132,92},{148,95},{158,100},{172,107},{187,116},{230,132},{237,137},{248,149},{258,155},{270,166},{275,169},{285,176},{302,187},{309,191},{326,203},{333,206},{339,206},{352,212},{363,212},{374,212},{387,211},{394,211},{416,208},{424,204},{442,198},{455,192},{471,180},{494,165},{506,157},{517,147},{533,139},{546,131},{549,129},{552,125},{569,117},{580,111},{592,106},{610,99},{619,99},{649,105},{664,109},{678,119},{684,131},{684,135},{685,141}}},
	    {86,{{9,178},{18,175},{26,171},{33,167},{49,154},{59,146},{67,140},{73,137},{81,133},{89,130},{93,130},{100,128},{116,128},{126,128},{132,128},{137,128},{147,131},{152,135},{159,143},{170,151},{177,156},{185,159},{196,160},{200,160},{209,160},{225,155},{233,153},{240,151},{255,148},{271,144},{277,144},{284,143},{291,142},{310,151},{321,161},{324,170},{327,175},{331,183},{336,189},{344,198},{347,203},{356,213},{360,218},{372,223},{381,224},{386,224},{392,224},{398,221},{402,220},{412,217},{418,212},{424,211},{427,209},{430,208},{433,208},{439,205},{454,203},{459,201},{463,198},{471,195},{480,193},{482,192},{492,188},{509,186},{518,184},{534,184},{551,186},{558,189},{566,191},{576,196},{579,199},{585,204},{596,200},{607,191},{616,188},{618,187},{638,187},{644,187},{651,190},{666,198},{681,202},{684,208},{690,216},{694,223},{697,227},{700,239}}},
	    {52,{{2,356},{8,352},{14,345},{28,332},{43,322},{62,306},{73,293},{86,278},{99,265},{108,256},{114,250},{130,239},{138,232},{156,218},{165,213},{170,211},{186,203},{201,198},{218,190},{225,187},{248,178},{265,172},{286,166},{295,162},{304,159},{320,152},{337,144},{343,142},{355,138},{359,136},{376,131},{382,130},{397,122},{416,117},{431,113},{445,111},{459,110},{480,107},{509,102},{512,101},{535,101},{563,100},{586,100},{596,100},{627,100},{633,100},{636,100},{647,100},{660,100},{671,100},{680,100},{684,97}}},
	    {66,{{11,398},{13,394},{27,381},{42,370},{51,358},{58,349},{67,340},{73,333},{78,328},{83,323},{94,312},{101,305},{112,296},{120,290},{136,274},{143,263},{147,256},{152,243},{158,234},{171,218},{178,209},{185,202},{190,198},{194,193},{205,187},{219,179},{226,175},{243,163},{256,155},{266,150},{275,146},{279,144},{295,137},{307,131},{315,126},{331,122},{345,118},{359,113},{367,111},{373,109},{394,103},{402,100},{406,99},{417,96},{428,95},{437,93},{445,91},{453,90},{471,88},{486,88},{492,88},{514,85},{524,82},{553,76},{589,67},{603,67},{608,67},{625,68},{633,69},{637,70},{646,72},{658,75},{676,80},{687,83},{690,86},{696,92}}},
	    {44,{{409,0},{411,11},{413,25},{416,41},{415,59},{411,75},{410,85},{410,98},{410,108},{410,138},{412,173},{412,191},{415,207},{419,223},{423,235},{429,244},{433,254},{440,268},{442,278},{447,291},{452,303},{460,318},{464,324},{474,338},{484,350},{487,355},{491,363},{495,371},{501,378},{504,381},{515,389},{528,396},{541,403},{558,409},{574,410},{580,410},{599,410},{617,411},{633,413},{641,414},{647,415},{666,418},{682,422},{693,425}}},
	    {59,{{521,4},{516,3},{502,10},{494,15},{485,19},{475,23},{470,29},{458,36},{452,42},{444,49},{437,57},{429,66},{421,73},{418,78},{415,88},{411,94},{409,100},{408,103},{406,111},{405,126},{402,140},{401,147},{401,153},{399,164},{399,169},{399,177},{399,192},{399,202},{399,207},{399,220},{399,229},{399,234},{402,243},{404,249},{409,258},{414,267},{417,274},{425,288},{431,301},{435,312},{437,319},{441,329},{446,337},{449,341},{453,347},{459,356},{467,367},{474,380},{477,388},{481,405},{485,412},{488,419},{495,438},{501,446},{505,459},{506,462},{507,465},{508,469},{511,474}}},
	*/

	    {52,{{1,67},{12,64},{23,60},{41,57},{62,56},{100,56},{118,56},{128,56},{138,61},{150,71},{155,75},{173,86},{183,94},{188,97},{201,107},{214,113},{223,120},{232,125},{251,127},{269,128},{284,128},{309,125},{321,123},{333,121},{344,118},{358,117},{369,117},{378,117},{395,117},{402,118},{412,119},{431,123},{442,126},{456,133},{476,142},{483,147},{499,158},{504,161},{525,170},{531,170},{542,170},{553,168},{570,164},{599,161},{625,161},{646,164},{657,174},{666,182},{675,188},{682,194},{695,206},{698,210}}},
	    {54,{{219,0},{224,7},{230,13},{236,20},{246,32},{251,38},{257,44},{267,55},{279,63},{288,66},{310,74},{321,76},{333,80},{349,84},{358,88},{377,96},{383,101},{387,107},{394,118},{397,122},{400,126},{409,138},{415,145},{429,152},{439,157},{451,161},{468,167},{481,174},{498,188},{507,197},{511,203},{519,216},{523,226},{523,227},{525,228},{528,231},{530,235},{536,243},{552,261},{564,267},{592,274},{603,276},{620,281},{630,284},{641,292},{648,298},{652,303},{654,307},{658,314},{670,330},{680,344},{693,366},{699,376},{704,385}}},
	    {53,{{27,6},{34,8},{38,9},{46,12},{54,14},{58,16},{70,19},{77,22},{87,26},{101,31},{107,34},{120,38},{127,41},{141,47},{163,54},{171,57},{195,67},{220,74},{243,80},{253,84},{262,89},{280,94},{287,97},{292,98},{300,102},{306,104},{314,106},{327,109},{348,116},{367,121},{372,123},{382,127},{405,133},{420,140},{431,144},{444,150},{458,155},{476,161},{492,166},{506,173},{520,180},{530,185},{542,194},{567,205},{584,214},{594,219},{598,221},{618,231},{629,236},{648,247},{666,258},{674,267},{683,277}}},
	    {44,{{29,456},{30,446},{31,435},{36,423},{41,413},{44,408},{47,402},{61,385},{71,370},{80,355},{101,328},{112,313},{134,301},{143,295},{162,281},{177,262},{189,250},{199,237},{202,230},{204,226},{204,219},{204,216},{207,205},{210,196},{220,184},{227,178},{241,170},{247,168},{258,164},{263,162},{296,153},{315,138},{323,129},{332,112},{348,79},{361,59},{376,44},{387,31},{392,24},{403,12},{411,6},{418,0},{422,-3},{426,-5}}},
	    {62,{{116,454},{124,447},{130,441},{137,431},{140,427},{140,424},{141,418},{142,412},{147,400},{149,391},{150,380},{150,367},{148,359},{144,350},{142,339},{139,330},{139,324},{137,313},{137,302},{137,290},{137,283},{137,269},{139,259},{141,252},{143,242},{150,231},{153,225},{161,216},{165,213},{172,207},{179,201},{190,194},{203,189},{212,185},{227,178},{247,174},{264,172},{270,172},{292,166},{304,164},{330,158},{339,150},{342,147},{353,137},{360,131},{362,128},{365,123},{375,109},{377,105},{387,91},{396,79},{402,69},{410,56},{414,49},{427,37},{442,22},{452,14},{456,10},{465,7},{476,5},{486,3},{497,-1}}},
	    {32,{{231,455},{230,451},{230,445},{230,428},{230,419},{230,411},{230,397},{231,383},{237,364},{248,338},{259,315},{267,295},{274,286},{289,266},{302,251},{317,237},{330,229},{341,224},{376,205},{404,191},{416,186},{433,179},{457,170},{484,165},{524,159},{578,148},{626,136},{645,131},{660,129},{681,129},{688,130},{700,130}}},
	    {59,{{675,69},{663,69},{646,72},{631,74},{618,75},{591,81},{582,86},{571,91},{561,97},{548,105},{536,109},{528,116},{523,118},{518,125},{515,129},{512,133},{505,148},{499,156},{491,171},{485,179},{477,194},{464,216},{458,226},{454,233},{450,240},{444,247},{438,251},{430,255},{420,259},{414,261},{400,268},{382,278},{375,281},{371,285},{362,291},{358,295},{349,305},{346,307},{338,313},{328,320},{322,325},{317,329},{311,335},{301,347},{296,353},{296,357},{292,365},{292,371},{292,379},{292,391},{293,404},{293,410},{293,426},{295,433},{298,439},{300,452},{303,458},{306,465},{309,470}}},
	    {37,{{5,206},{17,206},{34,206},{50,206},{75,208},{101,208},{117,210},{131,211},{159,212},{201,222},{242,230},{257,235},{286,246},{316,262},{325,269},{348,290},{360,300},{374,312},{387,325},{395,332},{399,335},{409,346},{413,350},{427,364},{437,377},{449,391},{458,405},{463,415},{468,421},{471,426},{478,439},{487,453},{490,456},{495,465},{497,469},{506,481},{511,487}}},
	    {61,{{5,269},{13,268},{40,265},{59,260},{66,259},{82,252},{90,246},{99,238},{107,233},{121,223},{129,221},{142,215},{152,212},{170,209},{179,208},{188,208},{197,206},{209,205},{214,205},{224,205},{232,205},{241,206},{248,208},{255,210},{265,213},{270,216},{274,219},{285,226},{291,233},{294,235},{300,238},{314,245},{327,254},{369,268},{417,279},{424,285},{432,292},{432,299},{432,305},{432,316},{437,326},{438,333},{438,337},{438,340},{438,347},{438,353},{441,363},{447,373},{459,383},{465,389},{475,395},{486,401},{505,411},{528,421},{535,424},{546,433},{565,442},{585,450},{595,454},{601,462},{601,468}}},

};

struct Orbit {
	Point pointF;
	Point pointL;
	int attribute;
	bool key;
	int NE;
}orbit[MAX];//轨迹段集合TS
struct Cluster {
	Orbit centerOrbit;
	Orbit otherOrbit[MAX];
	int n;
};//轨迹簇分类

int orbitNum[MaxLength] = { 0 };//轨迹段条数

Trajectory trajectorySection[M];//划分后得到轨迹分段，这里是初始定义


//返回两个数中最小的数
double min_2N(double x, double y) {
	if (x<y)
		return x;
	else
		return y;
}
//s点到以a，b为端点的直线距离
double dis_2D(Point a, Point b, Point s) {
	double ab = sqrt(pow((a.x - b.x), 2.0) + pow((a.y - b.y), 2.0));
	double as = sqrt(pow((a.x - s.x), 2.0) + pow((a.y - s.y), 2.0));
	double bs = sqrt(pow((s.x - b.x), 2.0) + pow((s.y - b.y), 2.0));

	if (as == 0||ab == 0)
		return 0;
	double cos_A = (pow(as, 2.0) + pow(ab, 2.0) - pow(bs, 2.0)) / (2 * ab*as);
	if ((1 - pow(cos_A, 2.0)) < 0)
		return 0;
	double sin_A = sqrt(1 - pow(cos_A, 2.0));
	return as*sin_A;
}
//s点到以a，b为端点的直线的垂点距离端点最小距离
double dis_2V(Point a, Point b, Point s) {
	double ab = sqrt(pow((a.x - b.x), 2.0) + pow((a.y - b.y), 2.0));
	double as = sqrt(pow((a.x - s.x), 2.0) + pow((a.y - s.y), 2.0));
	double bs = sqrt(pow((s.x - b.x), 2.0) + pow((s.y - b.y), 2.0));

	if (as == 0||ab == 0)
		return 0;
	double cos_A = (pow(as, 2.0) + pow(ab, 2.0) - pow(bs, 2.0)) / (2 * ab*as);
	if (cos_A<0)
		return -as*cos_A;
	else {
		return as*cos_A;
	}
}
//计算轨迹转角
double triangleAngle(Point point1, Point point2, Point point3) {
	double a, b, c, m0, m1;
	int flag;
	a = sqrt((point2.x - point1.x)*(point2.x - point1.x) + (point2.y - point1.y)*(point2.y - point1.y));
	b = sqrt((point3.x - point2.x)*(point3.x - point2.x) + (point3.y - point2.y)*(point3.y - point2.y));
	c = sqrt((point3.x - point1.x)*(point3.x - point1.x) + (point3.y - point1.y)*(point3.y - point1.y));
	m0 = acos((a*a + b*b - c*c) / (2 * a*b));
	flag = (point2.x - point1.x)*(point3.x - point2.x) + (point2.y - point1.y)*(point3.y - point2.y);
	if (flag >= 0) {
		m1 = pi - m0;
	}
	else {
		m1 = m0 - pi;
	}
	return m1;
}
//划分轨迹为轨迹分段(转角大于90度的点为特征点)
void trackSegment() {
	double flag;
	int m;
	for (int i = 0; i<M; i++) {
		//每个轨迹有0到n-3个转角
		m = 0;
		trajectorySection[i].point[m].x = trajectory[i].point[0].x;
		trajectorySection[i].point[m].y = trajectory[i].point[0].y;
		m = m + 1;
		for (int j = 0; j<trajectory[i].n - 2; j++) {
			flag = triangleAngle(trajectory[i].point[j], trajectory[i].point[j + 1], trajectory[i].point[j + 2]);
			if (fabs(flag) >= w0) {
				trajectorySection[i].point[m].x = trajectory[i].point[j + 1].x;
				trajectorySection[i].point[m].y = trajectory[i].point[j + 1].y;
				m++;
			}
		}
		trajectorySection[i].point[m].x = trajectory[i].point[trajectory[i].n - 1].x;
		trajectorySection[i].point[m].y = trajectory[i].point[trajectory[i].n - 1].y;
		trajectorySection[i].n = m + 1;
	}
}
//划分轨迹转换为轨迹段集合形式TS
int trackTurn() {
	int m = 0;
	for (int ii = 0; ii<M; ii++) {
		for (int j = 0; j<trajectorySection[ii].n - 1; j++) {
			orbit[m].pointF.x = trajectorySection[ii].point[j].x;
			orbit[m].pointF.y = trajectorySection[ii].point[j].y;
			orbit[m].pointL.x = trajectorySection[ii].point[j + 1].x;
			orbit[m].pointL.y = trajectorySection[ii].point[j + 1].y;
			orbit[m].key = false;
			orbit[m].attribute = ii;
			m++;
		}
		if (ii >= 1)
			orbitNum[ii] = m - orbitNum[ii - 1];
		else
			orbitNum[ii] = m;
	}
	return m;
}
//根据权重计算轨迹段的结构相似度
double DirDist(Orbit orbit1, Orbit orbit2) {
	double dirDist;
	double m, l, n, i, j, temp;
	m = sqrt(orbit1.pointF.x*orbit1.pointF.x + orbit1.pointF.y*orbit1.pointF.y);
	l = sqrt(orbit1.pointL.x*orbit1.pointL.x + orbit1.pointL.y*orbit1.pointL.y);
	n = acos((orbit1.pointF.x*orbit1.pointL.x + orbit1.pointF.y*orbit1.pointL.y) / (m*l));
	i = (orbit1.pointF.x - orbit1.pointL.x)*(orbit1.pointF.x - orbit1.pointL.x) + (orbit1.pointF.y - orbit1.pointL.y)*(orbit1.pointF.y - orbit1.pointL.y);
	j = (orbit2.pointF.x - orbit2.pointL.x)*(orbit2.pointF.x - orbit2.pointL.x) + (orbit2.pointF.y - orbit2.pointL.y)*(orbit2.pointF.y - orbit2.pointL.y);
	temp = sqrt(min_2N(i, j));
	if (0 <= n&&n <= (pi / 2)) {
		dirDist = temp*sin(n);
	}
	else if ((pi / 2) < n&&n <= pi) {
		dirDist = temp;
	}
	else {
		dirDist = 0;
	}
	return dirDist;//角度
}
double AngleDist(Orbit orbit1, Orbit orbit2) {
	double angleDist1, angelDist2;
	double l1, l2, m1, m2;
	l1 = dis_2V(orbit1.pointF, orbit1.pointL, orbit2.pointF);
	l2 = dis_2V(orbit1.pointL, orbit1.pointF, orbit2.pointL);
	angleDist1 = min_2N(l1, l2);
	m1 = dis_2V(orbit2.pointF, orbit2.pointL, orbit1.pointF);
	m2 = dis_2V(orbit2.pointL, orbit2.pointF, orbit1.pointL);
	angelDist2 = min_2N(m1, m2);
	return min_2N(angleDist1, angelDist2);//转角,水平方向距离
}
double LocDist(Orbit orbit1, Orbit orbit2) {
	double locDist1, locDist2;
	double l1, l2, m1, m2;
	l1 = dis_2D(orbit1.pointF, orbit1.pointL, orbit2.pointF);
	l2 = dis_2D(orbit1.pointF, orbit1.pointL, orbit2.pointL);
	if ((l1 + l2) != 0)
		locDist1 = (l1*l1 + l2*l2) / (l1 + l2);
	else
		locDist1 = 0;
	m1 = dis_2D(orbit2.pointF, orbit2.pointL, orbit1.pointF);
	m2 = dis_2D(orbit2.pointF, orbit2.pointL, orbit1.pointL);
	if ((m1 + m2) != 0)
		locDist2 = (m1*m1 + m2*m2) / (m1 + m2);
	else
		locDist2 = 0;
	return min_2N(locDist1, locDist2);//位置,垂直距离
}

double SDIST(Orbit orbit1, Orbit orbit2) {
	double dirDist, angleDist, locDist;//SpeedDist权重为0,不考虑速度
	double SDIST;
	dirDist = DirDist(orbit1, orbit2);
	angleDist = AngleDist(orbit1, orbit2);
	locDist = LocDist(orbit1, orbit2);
	SDIST = WD*dirDist + WA*angleDist + WL*locDist;
	return SDIST;//SDIST越小，越相似
}

double SSIM(Orbit orbit1, Orbit orbit2) {
	return 1 - SDIST(orbit1, orbit2) / maxSDIDT;//归一化函数,SSIM越大，越相似
}

//计算聚类
void MakeCluster() {
	for (int i = 0; i < KNN; i++) {
		for(int j=0;j<M;j++)
			if(j!=1)
				class_group[i][j] = 0;//还原
	}
	for (int i = 0; i<M; i++) {
		bool flag = true;
		double max = 0;
		int temp;
		for (int j = 0; j<KNN; j++)
			if (i == class_group[j][1]) {
				flag = false;
			}
		int ml = 0;
		if (flag) {
			for (int j = 0; j<KNN; j++)
				if (max<DirTool[i][class_group[j][1]]) {
					max = DirTool[i][class_group[j][1]];
					ml = j;
				}
			class_group[ml][0]++;
			temp = class_group[ml][0];
			class_group[ml][temp + 1] = i;
		}//class_group[][0]表示与中心点相似的聚类数，class_group[][1]表示聚类中心为轨迹X（代号）
	}
}
//计算聚类中心
bool CenterCluster() {
	int p1, p2, centerp,tempCenter[KNN];

	for (int i = 0; i < KNN; i++) {
		double maxp = 0;
		for (int j = 0; j < class_group[i][0] + 1; j++) {
			double tempp = 0;
			for (int k = 0; k < class_group[i][0] + 1; k++)
				if (k != j) {
					p1 = class_group[i][j + 1];
					p2 = class_group[i][k + 1];
					tempp = tempp + DirTool[p1][p2];
				}
			//以class_group[i][j + 1]为中心的聚类距离
			if (maxp < tempp) {
				maxp = tempp;
				centerp = class_group[i][j + 1];
			}
		}
		if (class_group[i][0] > 0) {
			tempCenter[i] = class_group[i][1];
			class_group[i][1] = centerp;
		}
		else {
			tempCenter[i] = class_group[i][1];
		}
		
	}
	bool flag = true;
	for (int i = 0; i < KNN; i++) {
		if (tempCenter[i] != class_group[i][1])
			flag = false;
	}
	return flag;
}


void Algorithm() {
	//基于结构相似度的轨迹聚类算法_袁冠
	//算法：Trajectory Clustering based on Structural Similarity (TC-SS)
	//输入：轨迹集合I={TR1, TR2, …, TRn }，相关参数：ω（转角阈值），W（权重向量），ε（近邻阈值），σ（近邻数量阈值）
	//输出：轨迹段聚类集合O={C1, C2, …, Cnum}
	/*第1阶段：轨迹段相似度计算*/
	//1) for each TRi ∈ I  do
	//2)   TS←根据ω划分TRi;
	//3) for each Li, Lj ∈ TS ∧ i≠j ∧Li.TR ≠ Lj.TR do
	//4)   Initial SSIM(Li, Lj);   /*根据权重计算轨迹段的结构相似度*/
	//5)   SSIM_Computer(Li, Lj)* W; /*计算轨迹段间的结构相似度*/
	//6)   if SSIM(Li, Lj)≥ε then
	//7)     Nε(Li)←Lj;  /*设定Li 的ε-近邻集合*/
	//end for
	/*第2阶段：轨迹段进行聚类*/
	//8) Set clusterId = 0;
	//9) Mark all segments as unclassified;
	//10) for each Li ∈ TS and Li is unclassified do
	//11)   if | Nε(Li) | ≥ σ then /*寻找可作为聚类中心的轨迹段*/
	//12)     for each Lj ∈ Nε(Li) do /*遍历轨迹ε近邻*/
	//13)       if Rdis(Li, Lj) is φ or Cdis(Li) is φ then
	//14)          Mark Li as noise;
	//else  /*对设置聚类ID*/
	//15)          Assign clusterId to ∀L ∈ Nε(Li);
	//16)          Add Nε(Li)- Li to Queue Q;
	//17)          ExpandCluster(Q, clusterId, σ); /*扩展轨迹的近邻聚类*/
	//end for
	//18)    Increase clusterId by 1;
	//end for;  /*对可达近邻进行聚类*/
	//19) ExpandCluster(Q, clusterId, σ)
	//20)   while (Q≠φ) do /*遍历队列中的轨迹段*/
	//21)     Get L from Q;
	//22)     if | Nε(L) | ≥ σ then
	//23)       for each X ∈ Nε(L) do
	//24)         if X is noise then
	//25)           Assign clusterId to X;
	//else
	//26)            Add X to Queue Q;
	//27)     Remove L from Queue Q; End

	trackSegment();
	int lengthN = trackTurn();
	double maxTempSDIST = 0;
	double tempSD, tempSS;

	for (int i = 0; i<lengthN; i++) {
		for (int j = i + 1; j<lengthN; j++) {
			tempSD = SDIST(orbit[i], orbit[j]);
			if (tempSD>maxTempSDIST&&orbit[i].attribute != orbit[j].attribute)
				maxTempSDIST = tempSD;
		}
	}
	maxSDIDT = maxTempSDIST;//归一化要求最大值
	Cluster cluster[MAX];

	////将所有轨迹分段的Ne临近放进cluster里
	//int m = 0;
	//for (int i = 0; i<lengthN; i++) {
	//	int n = 0;
	//	bool flag = true;//开关
	//	for (int j = 0; j<lengthN; j++) {
	//		tempSS = SSIM(orbit[i], orbit[j]);
	//		if (tempSS>e0&&orbit[i].attribute != orbit[j].attribute&&i != j)
	//		{
	//			flag = false;
	//			cluster[i].centerOrbit = orbit[i];
	//			cluster[i].otherOrbit[n] = orbit[j];
	//			n++;
	//			cluster[i].n = n + 1;//一个聚类里面的轨迹分段数目
	//		}
	//		if (flag) {
	//			cluster[m].centerOrbit = orbit[i];
	//			cluster[m].n = 1;
	//			flag = true;
	//		}
	//	}
	//	m++;
	//}

	for (int i = 0; i<M; i++) {
		for (int j = 0; j<M; j++) {
			if (i != j) {
				double count = 0, num = 0;
				for (int k = 0; k<lengthN; k++) {
					double temp = 0;
					if (orbit[k].attribute == i) {
						for (int l = 0; l<lengthN; l++) {
							if (orbit[l].attribute == j) {
								temp = SSIM(orbit[k], orbit[l]);
								if (temp<SSIM(orbit[k], orbit[l])&& temp <= DBL_MAX && temp >= -DBL_MAX)
									temp = SSIM(orbit[k], orbit[l]);//一段轨迹上的一段分段轨迹到另一条轨迹的最近距离即SSIM最大
							}
						}
						count = count + temp;
						num++;
					}
				}
				if (num == 0)
					DirTool[i][j] = 0;
				else
					DirTool[i][j] = count / num;
			}
		}
	}


	//KNN分类算法

	//初始化3个中心点
	for (int i = 0; i<KNN; i++) {
		class_group[i][1] = i;
	}
	//计算聚类
	bool flagKNN;
	do {
		MakeCluster();
		flagKNN=CenterCluster();
	} while (!flagKNN);
	/*for (int i = 0; i < 5; i++) {
		MakeCluster();
		flagKNN = CenterCluster();
	}
	*/
	//重新计算聚类
			
	//输出聚类结果
	for (int i = 0; i<KNN; i++) {
		cout << "center" << class_group[i][1]+1;
		for (int j = 0; j<class_group[i][0]; j++) {
				cout << " other " << class_group[i][j+2]+1<<" ";
		}
		cout << "\n";
	}
	//输出距离矩阵
	for (int i = 0; i<M; i++) {
		for (int j = 0; j<M; j++) {
			cout << DirTool[i][j] << " ";;
		}
		cout << "\n";
	}
	
	////输出轨迹分段相似聚类的属性值即原来轨迹编号（未化简）
	//for (int i = 0; i<m; i++) {
	//	//if(cluster[i].n>1){
	//	cout << "center " << cluster[i].centerOrbit.attribute + 1 << "(" << cluster[i].centerOrbit.pointF.x << ","
	//		<< cluster[i].centerOrbit.pointF.y << ")->" << "(" << cluster[i].centerOrbit.pointL.x << ","
	//		<< cluster[i].centerOrbit.pointL.y << ")" << " other ";
	//	for (int j = 0; j<cluster[i].n - 1; j++)
	//		cout << cluster[i].otherOrbit[j].attribute + 1 << "(" << cluster[i].otherOrbit[j].pointF.x << ","
	//		<< cluster[i].otherOrbit[j].pointF.y << ")->" << "(" << cluster[i].otherOrbit[j].pointL.x << ","
	//		<< cluster[i].otherOrbit[j].pointL.y << ")" << " ";
	//	cout << "\n";
	//	//}
	//}
	////输出特征相似线段
	//for (int i = 0; i<m; i++) {
	//	if (cluster[i].n>1) {
	//		cout << "center " << cluster[i].centerOrbit.attribute + 1 << " other ";
	//		for (int j = 0; j<cluster[i].n - 1; j++)
	//			cout << cluster[i].otherOrbit[j].attribute + 1 << " ";
	//		cout << "\n";
	//	}
	//}

}

int main() {

	Algorithm();

	// insert code here...
	getchar();
	return 0;
}
